#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Created on Mon Jun 26 12:05:34 2023.

@author: andreyvlasenko

write chemical constants, global variables and model parameters using along the model run here
"""
import torch





S_oh = torch.tensor(
    [
        [2.0, -1.0, 0.0, -1.0],  # OH
        [0.0, 1.0, -2.0, -1.0],  # HO2
        [-1.0, -1.0, 1.0, 0.0],  # H2O2
    ],
    dtype=torch.float32,
)




#verwer_stochio_data = 
#[
#[0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
#[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
#[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0], 
#[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
#[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,-1,-1,0,0,0,0,0,0],
#[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0],
#[1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,1,0,0,0],
#[0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
#[0,0,0,0,0,0,0,0,0,1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
#[0,0,0,0,0,0,0,0,0,0,0,1,-1,0,0,0,0,0,0,0,0,0,0,0,0],
#[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,-1],
#[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,1,-1,1],
#[0,0,0,-1,-1,-1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
#[0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,-1,0,0],
#[0,0,0,0,0,0,0,1,-1,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
#[0,0,-1,2,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0],
#[-1,1,1,0,0,0,0,0,1,-1,1,1,0,-1,0,0,0,0,0,0,0,1,-1,-1,1],
#[1,-1,-1,0,0,0,0,0-1,0,0,-1,0,0,0,0,0,0,0,0,1,0,0,0,0],
#[0,0,0,0,0,0,1,0,1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0],
#[0,0,1,0,0,-1,0,-1,0,0,0,0,0,-1,0,0,0,2,0,-1,0,0,0,0,0],

#]

# S is 20 rows x 25 cols

S_verwer = torch.tensor(
       [[ 0.,  0.,  0.,  1.,  1.,  1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
         1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
         0.,  0.,  1.,  0., -1., -1.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.],
       [ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
         0., -1.,  0.,  1.,  0.,  1.,  0.,  0.,  1.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0., -1., -1.,  0.,  0.,  0.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1., -1.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1., -1.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1., -1.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  0.,  0., -1., -1.,  1., -1.,  1.],
       [ 0.,  0.,  0., -1., -1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
         0.,  1., -1., -1.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  1., -1., -1.,  1.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0., -1.,  2.,  0.,  1.,  1.,  0.,  0.,  0.,  0.,  0.,  1.,
         0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.],
       [-1.,  1.,  1.,  0.,  0.,  0.,  0.,  0.,  1., -1.,  1.,  1.,  0.,
        -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1., -1., -1.,  1.],
       [ 1., -1., -1.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0., -1.,  0.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  1.,  0.,  0., -1.,  0.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  1.,  0.,  0., -1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,
        -1.,  0.,  0.,  0.,  2.,  0., -1.,  0.,  0.,  0.,  0.,  0.]],dtype=torch.float32)



### Species -------------------------------------------

#species = ["CO","HNO3","SO4","XO2","O1D","SO2","O3P","ALD2","PAN","CH3O","N2O5","NO3","HCHO","O3","C2O3","HO2","NO2","NO","CH3O2","OH"]
  


#Variable species
#  1 = CO (n)      8 = ALD2 (r)   15 = C2O3 (r)  
#  2 = HNO3 (n)    9 = PAN (r)    16 = HO2 (r)   
#  3 = SO4 (n)    10 = CH3O (r)   17 = NO2 (r)   
#  4 = XO2 (n)    11 = N2O5 (r)   18 = NO (r)    
#  5 = O1D (r)    12 = NO3 (r)    19 = CH3O2 (r) 
#  6 = SO2 (r)    13 = HCHO (r)   20 = OH (r)    
#  7 = O3P (r)    14 = O3 (r)    

#Fixed species
#  1 = AIR (r)     3 = H2O (r)   
#  2 = O2 (r)      4 = H2 (n)   


#class Stochiometry_matrix:
#    def __init__(self):
#        self.Smatrix = torch.tensor([0,0,0], dtype=torch.float32,)

#    def Smatrix_ini(self,scheme):
#        if scheme == "OH":
#            self.Smatrix = S_oh
#        if scheme == "Verwer":
#            self.Smatrix = S_verwer




#Smatrix_verwer = torch.tensor(verwer_stochio_data,dtype=torch.float32)
